// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Token {
  hash      String  @unique @db.VarChar(256)
  username  String  @unique @db.VarChar(150)

  @@map("token")
}

model Guardian {
  id        Int     @id @default(autoincrement())
  cpf       String  @unique @db.VarChar(11)
  name      String  @db.VarChar(150)
  address   String? @db.VarChar(150)
  email     String  @unique @db.VarChar(150)
  telephone String  @db.VarChar(45)
  cep       String? @db.VarChar(9)
  password  String  @db.VarChar(255)
  Pet       Pet[]

  @@map("guadian")
}

model BloodCenter {
  id          Int           @id @default(autoincrement())
  cnpj        String        @unique @db.VarChar(14)
  name        String        @db.VarChar(150)
  address     String?       @unique @db.VarChar(150)
  email       String        @unique @db.VarChar(150)
  telephone   String        @db.VarChar(45)
  cep         String?       @db.VarChar(9)
  password    String        @db.VarChar(255)
  Appointment Appointment[]

  @@map("bloodCenter")
}

model Pet {
  id                 Int           @id @default(autoincrement())
  guardian           Guardian      @relation(fields: [guardianId], references: [id])
  guardianId         Int
  name               String        @db.VarChar(150)
  species            Species       @relation(fields: [speciesId], references: [id])
  speciesId          Int
  statusToDonation   Status
  statusToDonationId Int
  sexOfPet           Sex
  sexOfPetId         Int
  age                String        @db.VarChar(2)
  bloodType          BloodType     @relation(fields: [bloodTypeId], references: [id])
  bloodTypeId        Int
  weight             String        @db.VarChar(5)
  breed              Breed         @relation(fields: [breedId], references: [id])
  breedId            Int
  Appointment        Appointment[]

  @@map("pet")
}

model Species {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(150)
  Pet       Pet[]
  BloodType BloodType[]
  Breed     Breed[]
}

model BloodType {
  id        Int     @id @default(autoincrement())
  name      String  @db.VarChar(150)
  species   Species @relation(fields: [speciesId], references: [id])
  speciesId Int
  Pet       Pet[]
}

model Breed {
  id        Int     @id @default(autoincrement())
  name      String  @db.VarChar(150)
  species   Species @relation(fields: [speciesId], references: [id])
  speciesId Int
  Pet       Pet[]
}

model Appointment {
  id            Int               @id @default(autoincrement())
  data          DateTime          @default(now())
  type          AppointmentType   @relation(fields: [typeId], references: [id])
  typeId        Int
  result        ResultAppointment @relation(fields: [resultId], references: [id])
  resultId      Int               @unique
  pet           Pet               @relation(fields: [petId], references: [id])
  petId         Int
  bloodCenter   BloodCenter       @relation(fields: [bloodCenterId], references: [id])
  bloodCenterId Int
}

model ResultAppointment {
  id          Int          @id @default(autoincrement())
  link        String
  Appointment Appointment?
}

model AppointmentType {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(150)
  Appointment Appointment[]
}

enum Sex {
  FAMALE
  MALE
}

enum Status {
  FIT
  UNFIT
}
